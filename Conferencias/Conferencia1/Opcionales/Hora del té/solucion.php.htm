<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script type="text/javascript" language="javascript">
var win = null;
function NewWindow(mypage,myname,w,h,scroll)
{
	LeftPosition = (screen.width) ? (screen.width-w)/2 : 0;
	TopPosition = (screen.height) ? (screen.height-h)/2 : 0;
	settings ='height='+h+',width='+w+',top='+TopPosition+',left='+LeftPosition+',scrollbars='+scroll+',resizable'
	win = window.open(mypage,myname,settings)
}
</script>

<script type="text/javascript" language="JavaScript" src="solucion.php_files/boxover.js"></script>

<script type="text/javascript" language="JavaScript">
function showhide(id){
if (document.getElementById){
obj = document.getElementById(id);
if (obj.style.display == 'none'){
obj.style.display = '';
} else {
obj.style.display = 'none';
}
	}
}
</script><link rel="stylesheet" href="solucion.php_files/styles.css" type="text/css">
</head><body bgcolor="" text="">
  <link rel="stylesheet" href="solucion.php_files/sample.css">  
  <script type="text/javascript" src="solucion.php_files/highlight.js"></script>
  <script type="text/javascript">
      //initHighlightingOnLoad('1c', 'axapta', 'cpp', 'delphi', 'xml', 'html', 'css', 'django', 'java', 'javascript', 'perl', 'php', 'python', 'rib', 'rsl', 'ruby', 'smalltalk', 'sql', 'vbscript'); 'gcc'
	initHighlightingOnLoad('java');
  </script><script type="text/javascript" src="solucion.php_files/static.js"></script>
  
<pre><code class="java">using System;
using System.Collections.Generic;
using System.Text;

namespace HoraTe
{
    <span class="class"><span class="keyword">class</span> <span class="title">Program</span>
    {</span>
        <span class="keyword">static</span> List&lt;List&lt;<span class="keyword">int</span>&gt;&gt; set;

        <span class="keyword">static</span> <span class="keyword">void</span> Search(<span class="keyword">int</span> c1, <span class="keyword">int</span> c2, out <span class="keyword">int</span> pc1, out <span class="keyword">int</span> pc2)
        {
            pc1 = pc2 = -<span class="number">1</span>;
            <span class="keyword">int</span> ptr = <span class="number">0</span>;
            foreach (List&lt;<span class="keyword">int</span>&gt; e in set)
            {
                <span class="keyword">if</span> (pc1 == -<span class="number">1</span>)
                    pc1 = e.Contains(c1) ? ptr : -<span class="number">1</span>;
                <span class="keyword">if</span> (pc2 == -<span class="number">1</span>)
                    pc2 = e.Contains(c2) ? ptr : -<span class="number">1</span>;
                <span class="keyword">if</span> (pc1 != -<span class="number">1</span> &amp;&amp; pc2 != -<span class="number">1</span>)
                    <span class="keyword">break</span>;
                ptr++;
            }
        }
        <span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args)
        {
            <span class="keyword">int</span> cases = <span class="keyword">int</span>.Parse(Console.ReadLine()), n, m, q, c1, c2, pc1, pc2;
            bool[] mark;
            set = <span class="keyword">new</span> List&lt;List&lt;<span class="keyword">int</span>&gt;&gt;();
            string[] arr;
            <span class="keyword">while</span> (cases-- &gt; <span class="number">0</span>)
            {
                arr = Console.ReadLine().Split();
                n = <span class="keyword">int</span>.Parse(arr[<span class="number">0</span>]);
                m = <span class="keyword">int</span>.Parse(arr[<span class="number">1</span>]);
                q = <span class="keyword">int</span>.Parse(arr[<span class="number">2</span>]);
                mark = <span class="keyword">new</span> bool[n + <span class="number">1</span>];
                set.Clear();
                <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>)
                {
                    arr = Console.ReadLine().Split();
                    c1 = <span class="keyword">int</span>.Parse(arr[<span class="number">0</span>]);
                    c2 = <span class="keyword">int</span>.Parse(arr[<span class="number">1</span>]);
                    <span class="keyword">if</span> (!mark[c1] &amp;&amp; !mark[c2])
                        set.Add(<span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;(<span class="keyword">new</span> <span class="keyword">int</span>[] { c1, c2 }));
                    <span class="keyword">else</span> <span class="keyword">if</span> (!mark[c1])
                        foreach(List&lt;<span class="keyword">int</span>&gt; e in set)
                        {
                            <span class="keyword">if</span> (e.Contains(c2))
                            {
                                e.Add(c1);
                                <span class="keyword">break</span>;
                            }
                        }
                    <span class="keyword">else</span> <span class="keyword">if</span> (!mark[c2])
                        foreach (List&lt;<span class="keyword">int</span>&gt; e in set)
                        {
                            <span class="keyword">if</span> (e.Contains(c1))
                            {
                                e.Add(c2);
                                <span class="keyword">break</span>;
                            }
                        }
                    <span class="keyword">else</span>
                    {
                        Search(c1, c2, out pc1, out pc2);
                        <span class="keyword">if</span> (pc1 != pc2)
                        {
                            set[pc1].AddRange(set[pc2]);
                            set.RemoveAt(pc2);
                        }
                    }
                    mark[c1] = mark[c2] = <span class="keyword">true</span>;
                }
                <span class="keyword">while</span> (q-- &gt; <span class="number">0</span>)
                {
                    arr = Console.ReadLine().Split();
                    c1 = <span class="keyword">int</span>.Parse(arr[<span class="number">0</span>]);
                    c2 = <span class="keyword">int</span>.Parse(arr[<span class="number">1</span>]);
                    <span class="keyword">if</span>(mark[<span class="keyword">int</span>.Parse(arr[<span class="number">0</span>])] &amp;&amp; mark[<span class="keyword">int</span>.Parse(arr[<span class="number">1</span>])])
                    {
                        Search(c1, c2, out pc1, out pc2);
                        Console.WriteLine(pc1 == pc2 ? <span class="string">"Y"</span> : <span class="string">"N"</span>);
                    }
                    <span class="keyword">else</span> Console.WriteLine(<span class="string">"N"</span>);
                }
            }
        }
    }
}
</code></pre><br><div align="center"><input class="button" value="Close Window" onclick="window.close()" type="button"></div><br><div style="position: absolute; visibility: hidden;"><div></div><div></div></div></body></html>