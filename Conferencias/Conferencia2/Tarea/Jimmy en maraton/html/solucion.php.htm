<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script type="text/javascript" language="javascript">
var win = null;
function NewWindow(mypage,myname,w,h,scroll)
{
	LeftPosition = (screen.width) ? (screen.width-w)/2 : 0;
	TopPosition = (screen.height) ? (screen.height-h)/2 : 0;
	settings ='height='+h+',width='+w+',top='+TopPosition+',left='+LeftPosition+',scrollbars='+scroll+',resizable'
	win = window.open(mypage,myname,settings)
}
</script>

<script type="text/javascript" language="JavaScript" src="solucion.php_files/boxover.js"></script>

<script type="text/javascript" language="JavaScript">
function showhide(id){
if (document.getElementById){
obj = document.getElementById(id);
if (obj.style.display == 'none'){
obj.style.display = '';
} else {
obj.style.display = 'none';
}
	}
}
</script><link rel="stylesheet" href="solucion.php_files/styles.css" type="text/css">
</head><body bgcolor="" text="">
  <link rel="stylesheet" href="solucion.php_files/sample.css">  
  <script type="text/javascript" src="solucion.php_files/highlight.js"></script>
  <script type="text/javascript">
      //initHighlightingOnLoad('1c', 'axapta', 'cpp', 'delphi', 'xml', 'html', 'css', 'django', 'java', 'javascript', 'perl', 'php', 'python', 'rib', 'rsl', 'ruby', 'smalltalk', 'sql', 'vbscript'); 'gcc'
	initHighlightingOnLoad('java');
  </script><script type="text/javascript" src="solucion.php_files/static.js"></script>
  
<pre><code class="java">using System;
using System.Collections.Generic;
using System.Text;

namespace JimmyMaraton
{
<span class="class"><span class="keyword">class</span> <span class="title">Program</span>
{</span>
<span class="keyword">static</span> <span class="keyword">int</span>[] permutation = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">15</span>];
<span class="keyword">static</span> <span class="keyword">long</span> sol;
<span class="keyword">static</span> <span class="keyword">long</span> GCD(<span class="keyword">long</span> a, <span class="keyword">long</span> b)
{
<span class="keyword">while</span> (b &gt; <span class="number">0</span>)
{
a %= b;
<span class="keyword">if</span> (a != b)
{
a ^= b;
b ^= a;
a ^= b;
}
}
<span class="keyword">return</span> a;
}

<span class="keyword">static</span> <span class="keyword">long</span> EfficientDivideOfFactorials(<span class="keyword">long</span> n, <span class="keyword">long</span>[] factorialsDivisors)
{
Array.Sort(factorialsDivisors);
<span class="keyword">long</span> numerator = <span class="number">1</span>, denominator = <span class="number">1</span>;
<span class="keyword">long</span> gcd;
<span class="keyword">int</span> ptr = factorialsDivisors.Length - <span class="number">1</span>;
<span class="keyword">while</span> (ptr &gt;= <span class="number">0</span>)
{
gcd = GCD(n, factorialsDivisors[ptr]);
numerator *= n / gcd;
denominator *= factorialsDivisors[ptr] / gcd;
<span class="keyword">if</span> ((gcd = GCD(numerator, denominator)) != <span class="number">1</span>)
{
numerator /= gcd;
denominator /= gcd;
}
n--;
<span class="keyword">if</span> (--factorialsDivisors[ptr] == <span class="number">0</span>)
ptr--;
}
<span class="keyword">return</span> numerator / denominator;
}

<span class="keyword">static</span> <span class="keyword">void</span> Calculate(<span class="keyword">int</span> n, <span class="keyword">int</span> length)
{
<span class="keyword">long</span>[] factorialsDivisors = <span class="keyword">new</span> <span class="keyword">long</span>[length + <span class="number">1</span>];
List&lt;<span class="keyword">int</span>&gt; elements = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();
List&lt;<span class="keyword">long</span>&gt; repetitions = <span class="keyword">new</span> List&lt;<span class="keyword">long</span>&gt;();
<span class="keyword">int</span> index = -<span class="number">1</span>;
<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length; i++)
{
factorialsDivisors[i] = permutation[i];
<span class="keyword">if</span> ((index = elements.IndexOf(permutation[i])) == -<span class="number">1</span>)
{
elements.Add(permutation[i]);
repetitions.Add(<span class="number">1</span>);
}
<span class="keyword">else</span> repetitions[index]++;
}
sol += EfficientDivideOfFactorials(n, factorialsDivisors) * EfficientDivideOfFactorials(length + <span class="number">1</span>, repetitions.ToArray());
}

<span class="keyword">static</span> <span class="keyword">void</span> R(<span class="keyword">int</span> n)
{
<span class="keyword">for</span> (<span class="keyword">int</span> k1 = <span class="number">1</span>, add1 = <span class="number">0</span>; add1 + k1 &lt;= n; k1++)
{
permutation[<span class="number">0</span>] = k1;
<span class="keyword">if</span> (add1 + k1 == n) 
Calculate(n,<span class="number">0</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k2 = k1, add2 = add1 + k1; add2 + k2 &lt;= n; k2++)
{
permutation[<span class="number">1</span>] = k2;
<span class="keyword">if</span> (add2 + k2 == n) 
Calculate(n,<span class="number">1</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k3 = k2, add3 = add2 + k2; add3 + k3 &lt;= n; k3++)
{
permutation[<span class="number">2</span>] = k3;
<span class="keyword">if</span> (add3 + k3 == n)
Calculate(n, <span class="number">2</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k4 = k3, add4 = add3 + k3; add4 + k4 &lt;= n; k4++)
{
permutation[<span class="number">3</span>] = k4;
<span class="keyword">if</span> (add4 + k4 == n)
Calculate(n, <span class="number">3</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k5 = k4, add5 = add4 + k4; add5 + k5 &lt;= n; k5++)
{
permutation[<span class="number">4</span>] = k5;
<span class="keyword">if</span> (add5 + k5 == n)
Calculate(n, <span class="number">4</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k6 = k5, add6 = add5 + k5; add6 + k6 &lt;= n; k6++)
{
permutation[<span class="number">5</span>] = k6;
<span class="keyword">if</span> (add6 + k6 == n)
Calculate(n, <span class="number">5</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k7 = k6, add7 = add6 + k6; add7 + k7 &lt;= n; k7++)
{
permutation[<span class="number">6</span>] = k7;
<span class="keyword">if</span> (add7 + k7 == n)
Calculate(n, <span class="number">6</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k8 = k7, add8 = add7 + k7; add8 + k8 &lt;= n; k8++)
{
permutation[<span class="number">7</span>] = k8;
<span class="keyword">if</span> (add8 + k8 == n)
Calculate(n, <span class="number">7</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k9 = k8, add9 = add8 + k8; add9 + k9 &lt;= n; k9++)
{
permutation[<span class="number">8</span>] = k9;
<span class="keyword">if</span> (add9 + k9 == n)
Calculate(n, <span class="number">8</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k10 = k9, add10 = add9 + k9; add10 + k10 &lt;= n; k10++)
{
permutation[<span class="number">9</span>] = k10;
<span class="keyword">if</span> (add10 + k10 == n)
Calculate(n, <span class="number">9</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k11 = k10, add11 = add10 + k10; add11 + k11 &lt;= n; k11++)
{
permutation[<span class="number">10</span>] = k11;
<span class="keyword">if</span> (add11 + k11 == n)
Calculate(n, <span class="number">10</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k12 = k11, add12 = add11 + k11; add12 + k12 &lt;= n; k12++)
{
permutation[<span class="number">11</span>] = k12;
<span class="keyword">if</span> (add12 + k12 == n)
Calculate(n, <span class="number">11</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k13 = k12, add13 = add12 + k12; add13 + k13 &lt;= n; k13++)
{
permutation[<span class="number">12</span>] = k13;
<span class="keyword">if</span> (add13 + k13 == n)
Calculate(n, <span class="number">12</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k14 = k13, add14 = add13 + k13; add14 + k14 &lt;= n; k14++)
{
permutation[<span class="number">13</span>] = k14;
<span class="keyword">if</span> (add14 + k14 == n)
Calculate(n, <span class="number">13</span>);
<span class="keyword">for</span> (<span class="keyword">int</span> k15 = k14, add15 = add14 + k14; add15 + k15 &lt;= n; k15++)
{
permutation[<span class="number">14</span>] = k15;
<span class="keyword">if</span> (add15 + k15 == n)
	Calculate(n, <span class="number">14</span>);

}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
<span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args)
{
<span class="keyword">long</span>[] cache = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">15</span>];
<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)
{
sol = <span class="number">0</span>;
R(i);
cache[i - <span class="number">1</span>] = sol;
}
<span class="keyword">int</span> cases = <span class="keyword">int</span>.Parse(Console.ReadLine());
<span class="keyword">while</span> (cases-- &gt; <span class="number">0</span>)
Console.WriteLine(cache[<span class="keyword">int</span>.Parse(Console.ReadLine()) - <span class="number">1</span>]);
}
}
}
</code></pre><br><div align="center"><input class="button" value="Close Window" onclick="window.close()" type="button"></div><br><div style="position: absolute; visibility: hidden;"><div></div><div></div></div></body></html>